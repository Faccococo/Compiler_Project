Program (1)
  ExtDefList (1)
    ExtDef (1)
      Specifier (1)
        TYPE: int
      FunDec (1)
        ID: mod
        LP: (
        VarList (1)
          ParamDec (1)
            Specifier (1)
              TYPE: int
            VarDec (1)
              ID: x
          COMMA: ,
          VarList (1)
            ParamDec (1)
              Specifier (1)
                TYPE: int
              VarDec (1)
                ID: n
        RP: )
      CompSt (1)
        LC: {
        StmtList (2)
          DefList (2)
            Def (2)
              Specifier (2)
                TYPE: int
              DecList (2)
                Dec (2)
                  VarDec (2)
                    ID: a
                  ASSIGN: =
                  Exp (2)
                    INT: 0
              SEMI: ;
            DefList (3)
              Def (3)
                Specifier (3)
                  TYPE: int
                DecList (3)
                  Dec (3)
                    VarDec (3)
                      ID: b
                    ASSIGN: =
                    Exp (3)
                      INT: 1
                SEMI: ;
              DefList (4)
                Def (4)
                  Specifier (4)
                    TYPE: int
                  DecList (4)
                    Dec (4)
                      VarDec (4)
                        ID: c
                      ASSIGN: =
                      Exp (4)
                        INT: 2
                  SEMI: ;
                Epsilon (0)
          StmtList (6)
            Stmt (6)
              RETURN: return
              Exp (6)
                Exp (6)
                  ID: x
                MINUS: -
                Exp (6)
                  Exp (6)
                    LP: (
                    Exp (6)
                      Exp (6)
                        ID: x
                      DIV: /
                      Exp (6)
                        ID: n
                    RP: )
                  MUL: *
                  Exp (6)
                    ID: n
            Epsilon (0)
        RC: }
    ExtDefList (9)
      ExtDef (9)
        Specifier (9)
          TYPE: int
        FunDec (9)
          ID: isPalindrome
          LP: (
          VarList (9)
            ParamDec (9)
              Specifier (9)
                TYPE: int
              VarDec (9)
                ID: num
          RP: )
        CompSt (9)
          LC: {
          StmtList (10)
            DefList (10)
              Def (10)
                Specifier (10)
                  TYPE: int
                DecList (10)
                  Dec (10)
                    VarDec (10)
                      ID: reversed
                    ASSIGN: =
                    Exp (10)
                      INT: 0
                SEMI: ;
              DefList (11)
                Def (11)
                  Specifier (11)
                    TYPE: int
                  DecList (11)
                    Dec (11)
                      VarDec (11)
                        ID: original
                      ASSIGN: =
                      Exp (11)
                        ID: num
                  SEMI: ;
                DefList (12)
                  Def (12)
                    Specifier (12)
                      TYPE: int
                    DecList (12)
                      Dec (12)
                        VarDec (12)
                          ID: digit
                        ASSIGN: =
                        Exp (12)
                          INT: 0
                    SEMI: ;
                  Epsilon (0)
            StmtList (13)
              Stmt (13)
                WHILE: while
                LP: (
                Exp (13)
                  Exp (13)
                    ID: num
                  NE: !=
                  Exp (13)
                    INT: 0
                RP: )
                Stmt (13)
                  CompSt (13)
                    LC: {
                    StmtList (14)
                      Stmt (14)
                        Exp (14)
                          Exp (14)
                            ID: digit
                          ASSIGN: =
                          Exp (14)
                            ID: mod
                            LP: (
                            Args (14)
                              Exp (14)
                                ID: num
                              COMMA: ,
                              Args (14)
                                Exp (14)
                                  INT: 10
                            RP: )
                        SEMI: ;
                      StmtList (15)
                        Stmt (15)
                          Exp (15)
                            Exp (15)
                              ID: reversed
                            ASSIGN: =
                            Exp (15)
                              Exp (15)
                                Exp (15)
                                  ID: reversed
                                MUL: *
                                Exp (15)
                                  INT: 10
                              PLUS: +
                              Exp (15)
                                ID: digit
                          SEMI: ;
                        StmtList (16)
                          Stmt (16)
                            Exp (16)
                              Exp (16)
                                ID: num
                              ASSIGN: =
                              Exp (16)
                                Exp (16)
                                  ID: num
                                DIV: /
                                Exp (16)
                                  INT: 10
                            SEMI: ;
                          Epsilon (0)
                    RC: }
              StmtList (18)
                Stmt (18)
                  IF: if
                  LP: (
                  Exp (18)
                    Exp (18)
                      ID: reversed
                    EQ: ==
                    Exp (18)
                      ID: original
                  RP: )
                  Stmt (18)
                    CompSt (18)
                      LC: {
                      StmtList (19)
                        Stmt (19)
                          RETURN: return
                          Exp (19)
                            INT: 1
                        Epsilon (0)
                      RC: }
                StmtList (21)
                  Stmt (21)
                    IF: if
                    LP: (
                    Exp (21)
                      Exp (21)
                        ID: reversed
                      EQ: ==
                      Exp (21)
                        ID: original
                    RP: )
                    Stmt (21)
                      CompSt (21)
                        LC: {
                        StmtList (22)
                          Stmt (22)
                            RETURN: return
                            Exp (22)
                              INT: 1
                          Epsilon (0)
                        RC: }
                    ELSE: else
                    Stmt (23)
                      CompSt (23)
                        LC: {
                        StmtList (24)
                          Stmt (24)
                            RETURN: return
                            Exp (24)
                              INT: 0
                          Epsilon (0)
                        RC: }
                  Epsilon (0)
          RC: }
      ExtDefList (28)
        ExtDef (28)
          Specifier (28)
            TYPE: int
          FunDec (28)
            ID: main
            LP: (
            RP: )
          CompSt (28)
            LC: {
            StmtList (29)
              DefList (29)
                Def (29)
                  Specifier (29)
                    TYPE: int
                  DecList (29)
                    Dec (29)
                      VarDec (29)
                        ID: number
                  SEMI: ;
                Epsilon (0)
              StmtList (30)
                Stmt (30)
                  Exp (30)
                    Exp (30)
                      ID: number
                    ASSIGN: =
                    Exp (30)
                      ID: read
                      LP: (
                      RP: )
                  SEMI: ;
                StmtList (31)
                  Stmt (31)
                    IF: if
                    LP: (
                    Exp (31)
                      Exp (31)
                        ID: isPalindrome
                        LP: (
                        Args (31)
                          Exp (31)
                            ID: number
                        RP: )
                      EQ: ==
                      Exp (31)
                        INT: 1
                    RP: )
                    Stmt (31)
                      CompSt (31)
                        LC: {
                        StmtList (32)
                          Stmt (32)
                            Exp (32)
                              ID: write
                              LP: (
                              Args (32)
                                Exp (32)
                                  INT: 1
                              RP: )
                            SEMI: ;
                          Epsilon (0)
                        RC: }
                    ELSE: else
                    Stmt (33)
                      CompSt (33)
                        LC: {
                        StmtList (34)
                          Stmt (34)
                            Exp (34)
                              ID: write
                              LP: (
                              Args (34)
                                Exp (34)
                                  INT: -1
                              RP: )
                            SEMI: ;
                          Epsilon (0)
                        RC: }
                  StmtList (37)
                    Stmt (37)
                      RETURN: return
                      Exp (37)
                        INT: 0
                    Epsilon (0)
            RC: }
        Epsilon (0)
