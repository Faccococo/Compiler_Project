Program (1)
  ExtDefList (1)
    ExtDef (1)
      Specifier (1)
        TYPE: int
      FunDec (1)
        ID: mod
        LP: (
        VarList (1)
          ParamDec (1)
            Specifier (1)
              TYPE: int
            VarDec (1)
              ID: x
          COMMA: ,
          VarList (1)
            ParamDec (1)
              Specifier (1)
                TYPE: int
              VarDec (1)
                ID: n
        RP: )
      CompSt (2)
        LC: {
        StmtList (3)
          Stmt (3)
            RETURN: return
            Exp (3)
              Exp (3)
                ID: x
              MINUS: -
              Exp (3)
                Exp (3)
                  LP: (
                  Exp (3)
                    Exp (3)
                      ID: x
                    DIV: /
                    Exp (3)
                      ID: n
                  RP: )
                MUL: *
                Exp (3)
                  ID: n
          Epsilon (0)
        RC: }
    ExtDefList (6)
      ExtDef (6)
        Specifier (6)
          TYPE: int
        FunDec (6)
          ID: isPalindrome
          LP: (
          VarList (6)
            ParamDec (6)
              Specifier (6)
                TYPE: int
              VarDec (6)
                ID: num
          RP: )
        CompSt (6)
          LC: {
          StmtList (7)
            DefList (7)
              Def (7)
                Specifier (7)
                  TYPE: int
                DecList (7)
                  Dec (7)
                    VarDec (7)
                      ID: reversed
                    ASSIGN: =
                    Exp (7)
                      INT: 0
                SEMI: ;
              DefList (8)
                Def (8)
                  Specifier (8)
                    TYPE: int
                  DecList (8)
                    Dec (8)
                      VarDec (8)
                        ID: original
                      ASSIGN: =
                      Exp (8)
                        ID: num
                  SEMI: ;
                DefList (9)
                  Def (9)
                    Specifier (9)
                      TYPE: int
                    DecList (9)
                      Dec (9)
                        VarDec (9)
                          ID: digit
                        ASSIGN: =
                        Exp (9)
                          INT: 0
                    SEMI: ;
                  Epsilon (0)
            StmtList (10)
              Stmt (10)
                WHILE: while
                LP: (
                Exp (10)
                  Exp (10)
                    ID: num
                  NE: !=
                  Exp (10)
                    INT: 0
                RP: )
                Stmt (10)
                  CompSt (10)
                    LC: {
                    StmtList (11)
                      Stmt (11)
                        Exp (11)
                          Exp (11)
                            ID: digit
                          ASSIGN: =
                          Exp (11)
                            ID: mod
                            LP: (
                            Args (11)
                              Exp (11)
                                ID: num
                              COMMA: ,
                              Args (11)
                                Exp (11)
                                  INT: 10
                            RP: )
                        SEMI: ;
                      StmtList (12)
                        Stmt (12)
                          Exp (12)
                            Exp (12)
                              ID: reversed
                            ASSIGN: =
                            Exp (12)
                              Exp (12)
                                Exp (12)
                                  ID: reversed
                                MUL: *
                                Exp (12)
                                  INT: 10
                              PLUS: +
                              Exp (12)
                                ID: digit
                          SEMI: ;
                        StmtList (13)
                          Stmt (13)
                            Exp (13)
                              Exp (13)
                                ID: num
                              ASSIGN: =
                              Exp (13)
                                Exp (13)
                                  ID: num
                                DIV: /
                                Exp (13)
                                  INT: 10
                            SEMI: ;
                          Epsilon (0)
                    RC: }
              StmtList (15)
                Stmt (15)
                  IF: if
                  LP: (
                  Exp (15)
                    Exp (15)
                      ID: reversed
                    EQ: ==
                    Exp (15)
                      ID: original
                  RP: )
                  Stmt (15)
                    CompSt (15)
                      LC: {
                      StmtList (16)
                        Stmt (16)
                          RETURN: return
                          Exp (16)
                            INT: 1
                        Epsilon (0)
                      RC: }
                  ELSE: else
                  Stmt (17)
                    CompSt (17)
                      LC: {
                      StmtList (18)
                        Stmt (18)
                          RETURN: return
                          Exp (18)
                            INT: 0
                        Epsilon (0)
                      RC: }
                Epsilon (0)
          RC: }
      ExtDefList (22)
        ExtDef (22)
          Specifier (22)
            TYPE: int
          FunDec (22)
            ID: main
            LP: (
            RP: )
          CompSt (22)
            LC: {
            StmtList (23)
              DefList (23)
                Def (23)
                  Specifier (23)
                    TYPE: int
                  DecList (23)
                    Dec (23)
                      VarDec (23)
                        ID: number
                  SEMI: ;
                Epsilon (0)
              StmtList (24)
                Stmt (24)
                  Exp (24)
                    Exp (24)
                      ID: number
                    ASSIGN: =
                    Exp (24)
                      ID: read
                      LP: (
                      RP: )
                  SEMI: ;
                StmtList (25)
                  Stmt (25)
                    IF: if
                    LP: (
                    Exp (25)
                      Exp (25)
                        ID: isPalindrome
                        LP: (
                        Args (25)
                          Exp (25)
                            ID: number
                        RP: )
                      EQ: ==
                      Exp (25)
                        INT: 1
                    RP: )
                    Stmt (25)
                      CompSt (25)
                        LC: {
                        StmtList (26)
                          Stmt (26)
                            Exp (26)
                              ID: write
                              LP: (
                              Args (26)
                                Exp (26)
                                  INT: 1
                              RP: )
                            SEMI: ;
                          Epsilon (0)
                        RC: }
                    ELSE: else
                    Stmt (27)
                      CompSt (27)
                        LC: {
                        StmtList (28)
                          Stmt (28)
                            Exp (28)
                              ID: write
                              LP: (
                              Args (28)
                                Exp (28)
                                  INT: -1
                              RP: )
                            SEMI: ;
                          